#!/bin/bash

# Set the ANSI color code for green
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Default output format is human-readable
output_format="human"

# Check for command line options
while getopts "f:" opt; do
  case $opt in
    f)
      if [[ "$OPTARG" == "html" ]]; then
        output_format="html"
      elif [[ "$OPTARG" == "csv" ]]; then
        output_format="csv"
      else
        echo "Error: Invalid output format '$OPTARG'"
        exit 1
      fi
      ;;
    \?)
      echo "Error: Invalid option -$OPTARG"
      exit 1
      ;;
  esac
done

# Shift the command line options so that the remaining arguments are the CVEs to query
shift $((OPTIND -1))

# Check if the user provided a CVE number as a command line parameter
if [[ $# -eq 0 ]]; then
  echo "Error: Please provide one or more CVE numbers as command line parameters"
  exit 1
fi

# Loop through each CVE and query the NVD API
for cve in "$@"; do
  # Use curl to query the NVD API and retrieve the CVE details in JSON format
  response=$(curl -s "https://services.nvd.nist.gov/rest/json/cve/1.0/$cve")

  # Check if the response contains any CVE details
  if [[ $(echo $response | jq '.result.CVE_Items | length') -eq 0 ]]; then
    echo "Error: No results found for CVE $cve"
    continue
  fi

  # Extract relevant details from the JSON response using jq
  description=$(echo $response | jq -r '.result.CVE_Items[0].cve.description.description_data[0].value')
  cvss_score=$(echo $response | jq -r '.result.CVE_Items[0].impact.baseMetricV2.cvssV2.baseScore')
  cvss3_score=$(echo "$response" | jq -r '.result.CVE_Items[0].impact.baseMetricV3.cvssV3.baseScore')
  severity2=$(echo $response | jq -r '.result.CVE_Items[0].impact.baseMetricV2.severity')
  severity3=$(echo $response | jq -r '.result.CVE_Items[0].impact.baseMetricV3.cvssV3.baseSeverity')
  published_date=$(echo $response | jq -r '.result.CVE_Items[0].publishedDate')
  last_modified_date=$(echo $response | jq -r '.result.CVE_Items[0].lastModifiedDate')
  attackvector=$(echo $response | jq -r '.result.CVE_Items[0].impact.baseMetricV3.cvssV3.attackVector')
  references=$(echo $response | jq -r '.result.CVE_Items[0].cve.references.reference_data[].url')

  # Extract the affected software information
  software=$(echo $response | jq -r '.result.CVE_Items[0].configurations.nodes[] | select(.cpe_match != null) | .cpe_match[].cpe23Uri')

  # Output the results in the specified format
  if [[ "$output_format" == "human" ]]; then
    # Output the results in human-readable format
    printf "${GREEN}CVE Number:${NC}     $cve\n"
    printf "${GREEN}Description:${NC}    $description\n"
    printf "${GREEN}CVSS Score:${NC}     $cvss_score\n"
    printf "${GREEN}CVSS3 Score:${NC}    $cvss3_score\n"
    printf "${GREEN}Severity 2:${NC}     $severity2\n"
    printf "${GREEN}Severity 3:${NC}     $severity3\n"
    printf "${GREEN}Attack Vector:${NC}  $attackvector\n"
    printf "${GREEN}Published Date:${NC} $published_date\n"
    printf "${GREEN}Last Modified:${NC}  $last_modified_date\n"
    printf "${GREEN}References:${NC}\n$references\n"
    printf "${GREEN}Affected Software:${NC}\n$software\n"
elif [[ "$output_format" == "csv" ]]; then
    # Output the results in CSV format
    printf "%s,\"%s\",%s,%s,%s,%s,\"%s\"\n" "$cve" "$description" "$cvss_score" "$cvss3_score" "$severity" "$published_date" "$last_modified_date" "$software"
  elif [[ "$output_format" == "html" ]]; then
    # Output the results in HTML format
    printf "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>\n" "$cve" "$description" "$cvss_score" "$cvss3_score" "$severity" "$published_date" "$last_modified_date" "$so
ftware"
  fi
done

# Finish the HTML output if necessary
if [[ "$output_format" == "html" ]]; then
  printf "</table>\n</body>\n</html>\n"
fi
